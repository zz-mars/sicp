(define (make-accumulator init-val)
 (lambda (inc-val)
  (begin (set! init-val (+ init-val inc-val))
   init-val)))

(define A (make-accumulator 5))
(display (A 10))
(newline)
(display (A 10))
(newline)

(define (make-monitored f)
 (let ((counter 0))
  (lambda (input)
   (if (eq? input 'how-many-calls?) counter
	(begin (set! counter (+ counter 1)) (f input))))))

(define s (make-monitored sqrt))
(display (s 100))
(newline)
(display (s 120))
(newline)
(display (s 'how-many-calls?))
(newline)

;(define (make-account balance pswd)
; (define (withdraw money)
;  (if (< balance money)
;   (display "in-sufficient money!")
;   (begin (set! balance (- balance money))
;	balance)))
; (define (diposite money)
;  (begin (set! balance (+ balance money))
;   balance))
; (lambda (psswd op)
;  (if (eq? psswd pswd)
;   (cond ((eq? op 'withdraw) withdraw)
;	((eq? op 'deposite) diposite)
;	(else (display "undefined operation!")))
;   (display "incorrect password!"))))
;
;(define acc (make-account 100 'zz))
;(display ((acc 'zz 'withdraw) 10))
;(newline)
;(display ((acc 'zz 'deposite) 20))
;(newline)
;((acc 'zzz 'deposite) 20)
;(newline)

(define (make-account balance pswd)
 (define (withdraw money)
  (if (< balance money)
   (display "in-sufficient money!")
   (begin (set! balance (- balance money))
	balance)))
 (define (diposite money)
  (begin (set! balance (+ balance money))
   balance))
 (let ((pwsdc 0))
  (lambda (psswd op)
   (if (eq? psswd pswd)
	(begin (set! pwsdc 0)
	 (cond ((eq? op 'withdraw) withdraw)
	  ((eq? op 'deposite) diposite)
	  (else (display "undefined operation!"))))
   (begin (set! pwsdc (+ pwsdc 1))
	(display pwsdc)
	(newline)
	(if (> pwsdc 3)
	 (display "call the cop!")
	 (display "incorrect password!")))))))

(define acc (make-account 100 'zz))
(display ((acc 'zz 'withdraw) 10))
(newline)
(display ((acc 'zz 'deposite) 20))
(newline)
(acc 'zzz 'deposite)
(newline)
(acc 'zzz 'deposite)
(newline)
(acc 'zzz 'deposite)
(newline)
(acc 'zzz 'deposite)
(newline)
(acc 'zzz 'deposite)
(newline)

(define rand
 (let ((x random-init))
  (lambda ()
   (set! x (rand-update x))
   x)))

(define (estimate-pi trials)
 (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (cesaro-test)
 (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials test)
 (define (iter rem cnt)
  (cond ((= rem 0) (/ cnt trials))
   ((test) (iter (- rem 1) (+ cnt 1)))
   (else (iter (- rem 1) cnt))))
 (iter trials 0))

(define (random-in-range low high)
 (let ((range (- high low)))
  (+ low (random range))))

(define (square x) (* x x))
; exercise 3.5
(define (area r)
 (define (test x y)
  (< (+ (square x) (square y)) (square r)))
 (define (estimate-area trials tester)
  (define (iter rem cnt)
   (cond ((= rem 0) (/ (* cnt (square r)) trials))
	((tester (random-in-range (- r) r) 
	  (random-in-range (- r) r))
	 (iter (- rem 1) (+ cnt 1)))
	(else (iter (- rem 1) cnt))))
  (iter trials 0))
 (estimate-area 100 test))

; exercise 3.6
(define (rand cmd)
 (let ((init-val 0))
  (cond ((eq? cmd 'generate)
		 (begin (set! init-val 
				 (rand-update init-val))
		  init-val))
   ((eq? cmd 'reset)
	(lambda (new-val)
	 (set! init-val new-val)))
   (else (display "illegal cmd")))))

(define rand
 (let ((init-val 0))
  (lambda (cmd)
   (cond ((eq? cmd 'generate)
		  (begin (set! init-val
				  (rand-update init-val))
		   init-val))
	((eq? cmd 'reset)
	 (lambda (new-val)
	  (set! init-val new-val)))
	(else (display "illegal cmd"))))))

